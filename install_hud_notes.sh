#!/bin/bash

# HUD Notes Global Installation Script - Production Version
# Makes HUD Notes executable globally with custom alias

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
SCRIPT_NAME="hud-notes"
PYTHON_SCRIPT="hud_notes.py"
INSTALL_DIR="/usr/local/bin"
CONFIG_DIR="$HOME/.config/hud-notes"

echo -e "${CYAN}ðŸš€ HUD Notes Global Installation${NC}"
echo -e "${CYAN}================================${NC}"
echo

# Function to print status messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root for global installation
check_permissions() {
    if [ "$EUID" -eq 0 ]; then
        print_warning "Running as root. This will install globally for all users."
    else
        print_status "Running as regular user. Will attempt to install to $INSTALL_DIR"
        print_status "You may be prompted for sudo password."
    fi
}

# Check if Python script exists
check_python_script() {
    if [ ! -f "$PYTHON_SCRIPT" ]; then
        print_error "Python script '$PYTHON_SCRIPT' not found!"
        echo "Make sure you're in the HUD Notes directory and the file exists."
        echo "Expected files:"
        echo "  - $PYTHON_SCRIPT"
        echo "  - templates/ directory"
        echo "  - requirements.txt"
        exit 1
    fi
    print_success "Found Python script: $PYTHON_SCRIPT"
}

# Check Python installation and dependencies
check_dependencies() {
    print_status "Checking Python installation..."
    
    if ! command -v python3 &> /dev/null; then
        print_error "Python3 is not installed or not in PATH!"
        echo "Please install Python3 first."
        exit 1
    fi
    
    PYTHON_VERSION=$(python3 --version)
    print_success "Found $PYTHON_VERSION"
    
    print_status "Checking required Python packages..."
    
    # List of required packages
    REQUIRED_PACKAGES=("tkinter" "pynput" "markdown2")
    MISSING_PACKAGES=()
    
    for package in "${REQUIRED_PACKAGES[@]}"; do
        if ! python3 -c "import $package" 2>/dev/null; then
            MISSING_PACKAGES+=("$package")
        fi
    done
    
    if [ ${#MISSING_PACKAGES[@]} -ne 0 ]; then
        print_warning "Missing required packages: ${MISSING_PACKAGES[*]}"
        echo -e "${YELLOW}To install missing packages, run:${NC}"
        echo "pip3 install ${MISSING_PACKAGES[*]}"
        echo
        read -p "Do you want to install missing packages now? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_status "Installing missing packages..."
            pip3 install "${MISSING_PACKAGES[@]}" || {
                print_error "Failed to install packages. Please install manually."
                exit 1
            }
            print_success "Packages installed successfully!"
        else
            print_error "Cannot proceed without required packages."
            exit 1
        fi
    else
        print_success "All required packages are installed!"
    fi
}

# Create wrapper script
create_wrapper_script() {
    print_status "Creating wrapper script..."
    
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    FULL_PYTHON_PATH="$SCRIPT_DIR/$PYTHON_SCRIPT"
    
    # Create wrapper script content
    WRAPPER_CONTENT="#!/bin/bash
# HUD Notes Wrapper Script - Production Version
# Auto-generated by install script

# Get the directory where this script is located
SCRIPT_DIR=\"\$(dirname \"\$(readlink -f \"\$0\")\")\"

# Path to the Python script (relative to wrapper location)
PYTHON_SCRIPT=\"$FULL_PYTHON_PATH\"

# Check if Python script exists
if [ ! -f \"\$PYTHON_SCRIPT\" ]; then
    echo \"Error: HUD Notes Python script not found at: \$PYTHON_SCRIPT\"
    echo \"Please ensure the installation is correct.\"
    exit 1
fi

# Check for templates directory
TEMPLATES_DIR=\"\$(dirname \"\$PYTHON_SCRIPT\")/templates\"
if [ ! -d \"\$TEMPLATES_DIR\" ]; then
    echo \"Warning: Templates directory not found at: \$TEMPLATES_DIR\"
    echo \"Templates will be created automatically on first run.\"
fi

# Run the Python script with all arguments passed through
exec python3 \"\$PYTHON_SCRIPT\" \"\$@\"
"

    # Write wrapper script to temporary file first
    TEMP_WRAPPER="/tmp/$SCRIPT_NAME"
    echo "$WRAPPER_CONTENT" > "$TEMP_WRAPPER"
    chmod +x "$TEMP_WRAPPER"
    
    print_success "Wrapper script created successfully!"
}

# Install wrapper script globally
install_globally() {
    print_status "Installing wrapper script to $INSTALL_DIR..."
    
    # Copy wrapper script to global location
    if [ -w "$INSTALL_DIR" ]; then
        cp "$TEMP_WRAPPER" "$INSTALL_DIR/$SCRIPT_NAME"
        chmod +x "$INSTALL_DIR/$SCRIPT_NAME"
    else
        sudo cp "$TEMP_WRAPPER" "$INSTALL_DIR/$SCRIPT_NAME"
        sudo chmod +x "$INSTALL_DIR/$SCRIPT_NAME"
    fi
    
    # Clean up temp file
    rm "$TEMP_WRAPPER"
    
    print_success "HUD Notes installed globally as '$SCRIPT_NAME'"
}

# Detect user's shell
detect_shell() {
    SHELL_NAME=$(basename "$SHELL")
    case $SHELL_NAME in
        bash)
            SHELL_CONFIG="$HOME/.bashrc"
            ;;
        zsh)
            SHELL_CONFIG="$HOME/.zshrc"
            ;;
        fish)
            SHELL_CONFIG="$HOME/.config/fish/config.fish"
            ;;
        *)
            SHELL_CONFIG="$HOME/.profile"
            print_warning "Unknown shell ($SHELL_NAME), using .profile"
            ;;
    esac
    print_status "Detected shell: $SHELL_NAME (config: $SHELL_CONFIG)"
}

# Create custom alias
create_alias() {
    echo
    echo -e "${PURPLE}ðŸŽ¯ Custom Alias Setup${NC}"
    echo "Choose a custom alias for HUD Notes (or press Enter to skip):"
    echo -e "${CYAN}Examples: notes, hud, quicknotes, n, hn${NC}"
    echo
    read -p "Enter your preferred alias: " CUSTOM_ALIAS
    
    if [ -z "$CUSTOM_ALIAS" ]; then
        print_status "No alias created. You can run HUD Notes with: $SCRIPT_NAME"
        return
    fi
    
    # Validate alias name
    if [[ ! "$CUSTOM_ALIAS" =~ ^[a-zA-Z][a-zA-Z0-9_-]*$ ]]; then
        print_error "Invalid alias name. Must start with letter and contain only letters, numbers, underscores, and hyphens."
        return
    fi
    
    # Check if alias already exists
    if command -v "$CUSTOM_ALIAS" &> /dev/null; then
        print_warning "Command '$CUSTOM_ALIAS' already exists!"
        read -p "Do you want to override it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "Alias creation cancelled."
            return
        fi
    fi
    
    # Add alias to shell config
    ALIAS_LINE="alias $CUSTOM_ALIAS='$SCRIPT_NAME'"
    
    # Backup existing config
    if [ -f "$SHELL_CONFIG" ]; then
        cp "$SHELL_CONFIG" "$SHELL_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
        print_status "Backed up existing shell config"
    fi
    
    # Add alias if it doesn't already exist
    if ! grep -q "alias $CUSTOM_ALIAS=" "$SHELL_CONFIG" 2>/dev/null; then
        echo "" >> "$SHELL_CONFIG"
        echo "# HUD Notes alias (added by installer)" >> "$SHELL_CONFIG"
        echo "$ALIAS_LINE" >> "$SHELL_CONFIG"
        print_success "Alias '$CUSTOM_ALIAS' added to $SHELL_CONFIG"
    else
        print_warning "Alias '$CUSTOM_ALIAS' already exists in $SHELL_CONFIG"
    fi
    
    # Make alias available in current session
    alias "$CUSTOM_ALIAS"="$SCRIPT_NAME"
    
    echo
    print_success "Alias created! You can now use: $CUSTOM_ALIAS"
    print_status "To use the alias in new terminals, restart your shell or run: source $SHELL_CONFIG"
}

# Create desktop entry (optional)
create_desktop_entry() {
    echo
    read -p "Create desktop launcher? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        DESKTOP_DIR="$HOME/.local/share/applications"
        mkdir -p "$DESKTOP_DIR"
        
        DESKTOP_FILE="$DESKTOP_DIR/hud-notes.desktop"
        cat > "$DESKTOP_FILE" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=HUD Notes
Comment=HUD-style overlay note-taking application
Exec=$INSTALL_DIR/$SCRIPT_NAME
Icon=accessories-text-editor
Terminal=false
Categories=Office;TextEditor;Utility;Development;
Keywords=notes;overlay;hud;markdown;programming;
StartupNotify=false
EOF
        
        chmod +x "$DESKTOP_FILE"
        print_success "Desktop launcher created!"
        
        # Update desktop database if available
        if command -v update-desktop-database &> /dev/null; then
            update-desktop-database "$DESKTOP_DIR" 2>/dev/null || true
        fi
    fi
}

# Test installation
test_installation() {
    print_status "Testing installation..."
    
    if command -v "$SCRIPT_NAME" &> /dev/null; then
        print_success "Global command '$SCRIPT_NAME' is available!"
    else
        print_error "Global command not found. Check your PATH."
        echo "PATH contains: $PATH"
        return 1
    fi
    
    # Test if alias works (if created)
    if [ -n "$CUSTOM_ALIAS" ] && command -v "$CUSTOM_ALIAS" &> /dev/null 2>&1; then
        print_success "Alias '$CUSTOM_ALIAS' is working!"
    fi
    
    # Test if the script can find its dependencies
    if timeout 3 "$SCRIPT_NAME" --help 2>/dev/null || timeout 3 "$SCRIPT_NAME" --version 2>/dev/null; then
        print_success "HUD Notes can run successfully!"
    else
        print_warning "Could not test HUD Notes execution (this is usually normal)"
    fi
}

# Show final instructions
show_instructions() {
    echo
    echo -e "${GREEN}ðŸŽ‰ Installation Complete!${NC}"
    echo -e "${GREEN}=========================${NC}"
    echo
    echo -e "${CYAN}How to use HUD Notes:${NC}"
    echo "â€¢ Run globally: ${YELLOW}$SCRIPT_NAME${NC}"
    if [ -n "$CUSTOM_ALIAS" ]; then
        echo "â€¢ Run with alias: ${YELLOW}$CUSTOM_ALIAS${NC}"
    fi
    echo "â€¢ Toggle overlay: ${YELLOW}Ctrl+Alt+T${NC} (global hotkey)"
    echo "â€¢ Show code input: ${YELLOW}Ctrl+Alt+C${NC}"
    echo "â€¢ Move between displays: ${YELLOW}Ctrl+Alt+M${NC}"
    echo
    echo -e "${CYAN}File locations:${NC}"
    echo "â€¢ Executable: $INSTALL_DIR/$SCRIPT_NAME"
    echo "â€¢ Source code: $(pwd)/$PYTHON_SCRIPT"
    echo "â€¢ Templates: $(pwd)/templates/"
    echo "â€¢ Config: ~/.config/hud-notes/ (created on first run)"
    echo
    echo -e "${CYAN}Template system:${NC}"
    echo "â€¢ Add custom templates to: $(pwd)/templates/"
    echo "â€¢ Templates use variables: {title}, {author}, {date}"
    echo "â€¢ Restart HUD Notes after adding new templates"
    echo
    echo -e "${CYAN}Uninstall:${NC}"
    echo "â€¢ Remove executable: ${YELLOW}sudo rm $INSTALL_DIR/$SCRIPT_NAME${NC}"
    echo "â€¢ Or use: ${YELLOW}./uninstall_hud_notes.sh${NC}"
    if [ -n "$CUSTOM_ALIAS" ]; then
        echo "â€¢ Remove alias from: $SHELL_CONFIG"
    fi
    echo
    if [ -n "$CUSTOM_ALIAS" ]; then
        echo -e "${YELLOW}ðŸ’¡ Restart your terminal or run 'source $SHELL_CONFIG' to use the alias${NC}"
        echo
    fi
    echo -e "${GREEN}ðŸš€ Ready to use HUD Notes!${NC}"
}

# Main installation process
main() {
    check_permissions
    check_python_script
    check_dependencies
    create_wrapper_script
    install_globally
    detect_shell
    create_alias
    create_desktop_entry
    
    if test_installation; then
        show_instructions
    else
        print_error "Installation test failed. Please check the installation manually."
        exit 1
    fi
}

# Run main function
main "$@"